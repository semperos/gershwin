(ns gershwin.core
  (:require [clojure.core :refer :all]
            [gershwin.rt :refer :all]))

!! ## Code loading ##

: load [s --] (stack-void (ap gershwin-load)) ;

: compile [s --] (stack-void (ap gershwin-compile)) ;

: require "Require a Gershwin namespace"
  [arg --]
  (stack-void (ap gershwin-require)) ;

: reload "Reload (compile & require) a namespace"
  [arg --]
  (stack-void (ap #(gershwin-require % true))) ;

: alias "Add an alias in the current namespace to another namespace."
  [alias namespace-sym --]
  (stack-void (ap 2 alias)) ;

: in-ns [s --] (stack-void (ap in-ns)) ;

: all-ns "Puts a sequence of all namespace on TOS."
  [-- coll]
  (all-ns) ;

: the-ns "If TOS is a Namespace, returns it, else tries to find the Namespace named by TOS."
  [x -- Namespace]
  (ap the-ns) ;

!! ## Invokables ##

!! These are low-level constructs that should not normally be used.
!! That said, when wrapping Clojure libraries for use in Gershwin,
!! the apply words will be used often.

: invoke "Invoke an IInvocable (quotations). The quotation itself puts things on the stack, so the result of the invocation itself is ignored."
  [quot -- ...]
  (stack-void (.invoke (pop-it))) ;

: apply "Apply the item on TOS to the second item as an argument. This and its higher-arity counterparts are not designed for quotations, since quotations do not take arguments, but instead to make idiomatic use of Clojure forms that implement IFn.

  Example: {:answer 42} :answer apply"
  [x invocable -- ...]
  (ap (pop-it)) ;

: apply2 "Same as apply, but apply the invocable to top two items on TOS."
  [x y invocable -- ...]
  (ap 2 (pop-it)) ;

: apply3 "Same as apply, but apply the invocable to top three items on TOS."
  [x y z invocable -- ...]
  (ap 3 (pop-it)) ;

: apply-swap "Invoke the IInvocable, apply it to the top two items on TOS after swapping them."
  [x y invocable -- ...]
  (pop-n-swap (pop-it)) ;

!! ## Utilities ##

: clear [] (stack-void (stack-clear)) ;

: pr [n --] (stack-void (ap pr)) ;

: prn [n --] (stack-void (ap prn)) ;

: print [n --] (stack-void (ap print)) ;

: println [n --] (stack-void (ap println)) ;

: meta {:added "initial" :doc "Get metadata for TOS. Note that most meaningful metadata is attached to var's that hold the actual values, so you'll need to call `var`"}
  [x -- y]
  (ap meta) ;

: type "Get an item's type"
  [x -- y]
  (ap type) ;

: class "Get an item's class"
  [x -- y]
  (ap class) ;

: ancestors "Put immediate and indirect parents of item on TOS."
  [x -- coll]
  (ap ancestors) ;

: symbol "Coerce TOS to a symbol"
  [x -- y]
  (ap symbol) ;

: symbol? "True if TOS is a symbol"
  [x -- ?]
  (ap symbol?) ;

: function? "True if TOS is a fn"
  [x -- ?]
  (ap fn?) ;

: var "Get var for TOS. Currently uses `resolve` as `var` causes an error."
  [x -- y]
  (ap gershwin-resolve) ;

: gershwin-var "For vars that share names between Gershwin words and Clojure functions, this removes the ambiguity and attempts to resolve the item as a Gershwin word var."
  [x -- y]
  (ap gershwin-var) ;

!! ## Shuffle words ##

!! Basics are: drop, swap, dup, rot

: drop "Remove the item at the TOS."
  [x --]
  (do (pop-it) ::stack-void) ;

!! Common synonym
: . [x --] drop ;

: swap "Swaps the two items on TOS."
  [x y -- y x]
  (let [y (pop-it)
        x (pop-it)]
    (conj-it y) x) ;

: dup "Duplicate the TOS."
  [x -- x x]
  (st-peek) ;

!! @todo Will add warnings about using things like rot, dupd if/when
!!   we get Factor-style dataflow combinators implemented
: rot "Rotate the items on TOS as shown in stack effect."
[x y z -- y z x]
  (let [z (pop-it)
        y (pop-it)
        x (pop-it)]
    (conj-it y) (conj-it z) x) ;

!! Factor extensions to base set

!! These include: drop2, drop3, nip, nip2, dup2, dup3, over, over2, pick
!! Note: 'pick' differs from what it might mean in most Forths
!! @todo Factor implements these as primitives, even though they could be implemented
!!   with the basic shuffle words above. Consider.

: drop2 "Remove top two items from TOS."
  [x y --]
  drop drop ;

: drop3 "Remove top three items from TOS."
  [x y z --]
  drop drop drop ;

: nip "Remove second element from TOS."
  [x y -- y]
  swap drop ;

: nip2 "Remove second and third elements from TOS."
  [x y z -- z]
  swap drop swap drop ;

: dup2 "Duplicate top two items on TOS."
  [x y -- x y x y]
  (let [y (st-peek)
        x (peek* (st-pop))]
    (conj-it x) y) ;

: dup3 "Duplicate top three items on TOS."
  [x y z -- x y z x y z]
  (let [cdr (st-pop)
        cddr (pop cdr)
        z (st-peek)
        y (peek* cdr)
        x (peek* cddr)]
    (conj-it x) (conj-it y) z) ;

: over "Duplicate second item on TOS."
  [x y -- x y x]
  (peek* (st-pop)) ;

: over2 "Duplicate second and third items on TOS."
  [x y z -- x y z x y]
  (let [cdr (st-pop)
        cddr (pop cdr)
        y (peek* cdr)
        x (peek* cddr)]
    (conj-it x) y) ;

: pick "Duplicate third item on TOS."
  [x y z -- x y z x]
  (peek* (pop (st-pop))) ;

!! ## Dataflow Combinators ##

!! ### Preservering combinators ###

: dip "Remove second item from TOS, execute the quotation on TOS, then restore second item on TOS."
  [x quot -- x]
  (let [quot (pop-it)
        x (pop-it)]
    (.invoke quot)
    x) ;

: dip2 "Remove the second and third items from TOS, execute the quotation on TOS, then restore the second and third items on TOS."
  [x y quot -- x y]
  swap < dip > dip ;

: dip3 "Remove the second, third, and fourth items from TOS, execute the quotation on TOS, then restore the second, third, and fourth items on TOS."
  [x y z quot -- x y z]
  swap < dip2 > dip ;

: dip4 "Remove the second, third, and fourth items from TOS, execute the quotation on TOS, then restore the second, third, and fourth items on TOS."
  [w x y z quot -- w x y z]
  swap < dip3 > dip ;

: dupd "Duplicate second item on TOS in-place."
  [x y -- x x y]
  < dup > dip ;

: keep "As opposed to dip, which removes the second item before executing the quotation, keep keeps the second item on the stack for the quotation's invocation, but then also adds it back again after the quotation has been executed."
  [..a x quot -- ( ..a x -- ..b ) -- ..b x]
  over < invoke > dip ;

: keep2 "Like keep, but restores first and second items on TOS after invoking quotation with them."
  [..a x y quot <--> ( ..a x y -- ..b ) -- ..b x y]
  < dup2 > dip dip2 ;

: keep3 "Like keep, but restores first, second, and third items on TOS after invoking quotation with them."
  [..a x y z quot <--> ( ..a x y z -- ..b ) -- ..b x y z]
  < dup3 > dip dip3 ;

!! ### Cleave combinators ###

!! Cleave operators mean: take a single piece of data and apply n number of quotations to it. These are common patterns for repeated uses of `keep`, which should be evident from their implementation.

: bi "Invoke the two quotations on TOS sequentially with the third item on TOS present for both invocations."
  [x p q --]
  < keep > dip invoke ;

: bi2 "Same as bi, but work with two pieces of data."
  [x y p q --]
  < keep2 > dip invoke ;

: bi3 "Same as bi, but work with three pieces of data."
  [x y z p q --]
  < keep3 > dip invoke ;

: tri "Invoke the three quotations on TOS sequentially with the third item on TOS present for all invocations."
  [x p q r --]
  < < keep > dip keep > dip invoke ;

: tri2 "Same as tri, but work with two pieces of data."
  [x y p q r --]
  < < keep2 > dip keep2 > dip invoke ;

: tri3 "Same as tri, but work with three pieces of data."
  [x y z p q r --]
  < < keep3 > dip keep3 > dip invoke ;

!! NOTE: The `cleave` word requires words we haven't implemented yet. Punting til later.

!! ### Spread combinators ###

!! Spread combinators apply n number of quotations to n (or 2*n) number of values. These are common patterns for repeated uses of dip. The asterisk `*` denotes spread combinators.

: bi* "Apply the two quotations to the two values in order."
  [x y p q --]
  < dip > dip invoke ;

: bi2* "Apply p to w and x, then apply q to y and z."
  [w x y z p q --]
  < dip2 > dip invoke ;

: tri* "Apply p to x, q to y, and r to z"
  [x y z p q r --]
  < < dip2 > dip dip > dip invoke ;

: tri2* "Apply p to u and v, q to w and x, and r to y and z"
  [u v w x y z p q r --]
  < dip4 > dip2 bi2* ;

!! NOTE: The `spread` word requires words we haven't implemented yet. Punting til later.

!! Booleans

: if
  [? then else -- ...]
  (let [else-quot (pop-it)
        then-quot (pop-it)
        condition (pop-it)]
    (if condition
      (stack-void (.invoke then-quot))
      (stack-void (.invoke else-quot)))) ;

: if-not
  [? then else -- ...]
  swap if ;

: when
  "'if' with no 'else' branch"
  [? then -- ...]
  < > if ;

: when-not
  [? then -- ...]
  < > if-not ;

: ? "Choose between t or f depending on truthiness of ?"
  [? t f]
  rot < drop > < nip > if ;

: and "If both values are true, outputs TOS. Else returns false."
  [x y -- ?]
  over ? ;

: boolean [x -- ?] < true > < false > if ;

: or "Outputs first truthy value, or false if neither is truthy."
  [x y -- ?]
  dupd ? dup < boolean > when-not ;

: true? [? -- ?] (ap true?) ;

: false? [? -- ?] (ap false?) ;

!! ### Apply combinators ###

!! Apply combinators apply a single quotation to multiple values. In this way, they are equivalent to using the spread combinators with each quotation being identical. The ampersand `&` denotes apply combinators (The `@` from Factor cannot be used as a Clojure:Gershwin symbol character).

: bi& "Apply the quotation to the top two items on TOS in order."
  [x y quot --]
  dup bi* ;

: bi2& "Apply the quotation to w and x, and then y and z."
  [w x y z quot --]
  dup bi2* ;

: tri& "Apply the quotation to the top three items on TOS in order."
  [x y z quot --]
  dup dup tri* ;

: tri2& "Apply the quotation to u and v, then to w and x, and finally to y and z."
  [u v w x y z quot --]
  dup dup tri2* ;

: both? "Returns truthy if application of quotation to both values is truthy in each case."
  [x y quot -- ?]
  bi& and ;

: either? "Returns truthy if either application of quotation produces a truthy value."
  [x y quot -- ?]
  bi& or ;

!! Basic math

: + [n n -- n] (ap 2 +) ;

: - [n n -- n] (pop-n-swap -) ;

: * [n n -- n] (ap 2 *) ;

: lt [n n -- ?] (pop-n-swap lt) ;

: gt [n n -- ?] (pop-n-swap gt) ;

: lt= [n n -- ?] (pop-n-swap lt=) ;

: gt= [n n -- ?] (pop-n-swap gt=) ;

: div [n n -- n] (pop-n-swap /) ;

: odd? [n -- ?] (ap odd?) ;

: even? [n -- ?] (ap even?) ;

!! Equality

: = [x x -- ?] (ap 2 =) ;

: == [n n -- ?] (ap 2 ==) ;

!! Collections

!! Major cheating for now; use Clojure directly.

: assoc [coll k v -- coll] (pop-n-swap2 assoc) ;

: get [key m -- x] (ap 2 get) ;

: aget [idx java-array -- x] (ap 2 aget) ;

: first [coll -- x] (ap first) ;

: second [coll -- x] (ap second) ;

: last [coll -- x] (ap last) ;

: peek [vector -- x] (ap peek) ;

!! @todo update-in

: conj [coll x -- coll] (pop-n-swap conj) ;

: cons [x coll -- coll] (pop-n-swap cons) ;

: dissoc [coll k -- coll] (pop-n-swap dissoc) ;

: nth [n coll -- x] (ap 2 nth) ;

: count [coll -- n] (ap count) ;

: alength [java-array -- n] (ap alength) ;

: empty? [coll -- ?] (ap empty?) ;

: contains?
  [coll item -- ?]
  (pop-n-swap contains?) ;

: some "Puts the first truthy value generated from invoking the given quotation for each item in the collection, else puts nil on TOS."
  [coll quot]
  (let [quot (pop-it)
        coll (pop-it)]
    (loop [coll coll]
      (if (seq coll)
        (do
          (conj-it (first coll))
          (.invoke quot)
          (if (pop-it)
            (first coll)
            (recur (rest coll))))
        nil))) ;

: has-items? "Same as has-item, but expects a collection of items to check for instead of a single one."
  [coll coll -- item-or-nil]
  clojure.core/set apply clojure.core/some apply2 ;

: has-item? "For everyone who thinks (some #{:foo} coll) is a rare departure from Clojure's otherwise pragmatic nature. Behaves like (some #{:foo} coll), returning the item being asked about if present or nil otherwise."
  [coll item -- item-or-nil]
  [] swap conj has-items? ;

: map "Invoke the quotation for each element in the collection, putting the new collection of these results on TOS."
  [coll quot -- coll]
  (let [quot (pop-it)
        coll (pop-it)]
    (lazy-seq
     (loop [coll coll final []]
       (if (seq coll)
         (do
           (conj-it (first coll))
           (.invoke quot)
           (recur (rest coll) (conj final (pop-it))))
         final)))) ;

: reduce "Given a collection and a quotation that expects two items off the stack, calls the quotation with the first two items of the collection, followed by invoking the quotation using that result and subsequent items from the collection.

If the collection is empty, returns nil. If the collection contains only one item, that item is put on TOS and the quotation is not invoked."
  [coll quot -- coll]
  (let [quot (pop-it)
        coll (pop-it)]
    (cond
     (empty? coll) nil

     (= (count coll) 1) (first coll)

     :else
     (do (conj-it (first coll))
         (conj-it (second coll))
         (.invoke quot)
         (if (gt (count coll) 2)
           (loop [coll (rest (rest coll))]
             (if (seq coll)
               (do
                 (conj-it (first coll))
                 (.invoke quot)
                 (recur (rest coll)))
               ::stack-void))
           ::stack-void)))) ;

: reduce-with "Like reduce, but begins the reduction by invoking the quotation using the specified \"accumulator\" and the first item from the collection, instead of the first two items from the collection like `reduce` does."
  [coll acc quot -- coll]
  (let [quot (pop-it)
        acc  (pop-it)
        coll (pop-it)]
    (cond
     (empty? coll) nil

     (= (count coll) 1) (first coll)

     :else
     (do (conj-it acc)
         (conj-it (first coll))
         (.invoke quot)
         (if (gt (count coll) 2)
           (loop [coll (rest coll)]
             (if (seq coll)
               (do
                 (conj-it (first coll))
                 (.invoke quot)
                 (recur (rest coll)))
               ::stack-void))
           ::stack-void)))) ;


: filter "Replace the collection with one including only those items that return truthy for the given predicate quotation."
  [coll pred-quot -- coll]
  (let [quot (pop-it)
        coll (pop-it)]
    (lazy-seq
     (loop [coll coll final []]
       (if (seq coll)
         (do
           (conj-it (first coll))
           (.invoke quot)
           (if (pop-it)
             (recur (rest coll) (conj final (first coll)))
             (recur (rest coll) final)))
         final)))) ;

: remove "Opposite of filter. Replace collection with one including only those items that return falsey for the given predicate."
  [coll pred-quot -- coll]
  (let [quot (pop-it)
        coll (pop-it)]
    (lazy-seq
     (loop [coll coll final []]
       (if (seq coll)
         (do
           (conj-it (first coll))
           (.invoke quot)
           (if-not (pop-it)
             (recur (rest coll) (conj final (first coll)))
             (recur (rest coll) final)))
         final)))) ;

: take "Put a lazy collection on TOS that consists of the first n items from the original collection."
  [coll n -- coll]
  (ap 2 take) ;

!! String & Regular Expressions

: str "Stringify the given item on TOS."
  [x -- s]
  (ap str) ;

: str2 "Concatenate the top two items as strings."
  [s s -- s]
  (pop-n-swap str) ;

: str3 "Concatenate the top three items as strings."
  [s s s -- s]
  (pop-n-swap2 str) ;

: re-pattern "Given a String, put a java.util.Pattern object on TOS. Note that you need to double-escape things per Java's Pattern requirements."
  [s -- r]
  (ap re-pattern) ;

!! Interactive development niceties

: print-doc "Print documentation metadata for a Gershwin word with the given name. Accepts either a symbol or a var."
  [n --]
  dup symbol? < var > < > if
  meta :doc apply println ;
